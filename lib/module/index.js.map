{"version":3,"sources":["index.js"],"names":["useEffect","AppState","NativeModules","Platform","ScreenRecorderDetect","ScreenDetect","props","OS","addEventListener","_handleAppStateChange","checkIfRecord","removeEventListener","get","then","isRecord","console","log","Detect","e","error","nextAppState","interve","setInterval","setTimeout","clearInterval"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,EAAmBC,aAAnB,EAAkCC,QAAlC,QAAkD,cAAlD;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAA2BF,aAAjC;;AAGA,MAAMG,YAAY,GAAIC,KAAD,IAAW;AAC5BN,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIG,QAAQ,CAACI,EAAT,IAAe,KAAnB,EAA0B;AACtBN,MAAAA,QAAQ,CAACO,gBAAT,CAA0B,QAA1B,EAAoCC,qBAApC;AACAC,MAAAA,aAAa;AACb,aAAO,MAAM;AACTT,QAAAA,QAAQ,CAACU,mBAAT,CAA6B,QAA7B,EAAuCF,qBAAvC;AACH,OAFD;AAGH;AACJ,GARQ,EAQN,CAACH,KAAD,CARM,CAAT;;AAUA,QAAMI,aAAa,GAAG,MAAM;AACxB,QAAI;AACAN,MAAAA,oBAAoB,CAACQ,GAArB,GAA2BC,IAA3B,CAAgCC,QAAQ,IAAI;AACxCC,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,QAAxB;;AACA,YAAIA,QAAQ,IAAIA,QAAQ,IAAI,KAA5B,EAAmC;AAC/B,cAAIR,KAAK,CAACW,MAAV,EAAkB;AACdX,YAAAA,KAAK,CAACW,MAAN,CAAaH,QAAb;AACH;AACJ,SAJD,MAIO;AACHR,UAAAA,KAAK,CAACW,MAAN,CAAaH,QAAb;AACH;AACJ,OATD;AAUH,KAXD,CAWE,OAAOI,CAAP,EAAU;AACRH,MAAAA,OAAO,CAACI,KAAR,CAAcD,CAAd;AACH;AACJ,GAfD;;AAiBA,QAAMT,qBAAqB,GAAG,MAAOW,YAAP,IAAwB;AAClD,QAAIC,OAAO,GAAGC,WAAW,CAAC,MAAM;AAC5BZ,MAAAA,aAAa;AAChB,KAFwB,EAEtB,IAFsB,CAAzB;AAGAa,IAAAA,UAAU,CAAC,MAAM;AACb,UAAIF,OAAO,IAAI,IAAf,EAAqB;AACjBG,QAAAA,aAAa,CAACH,OAAD,CAAb;AACH;AACJ,KAJS,EAIP,IAJO,CAAV;AAKH,GATD;;AAUA,SAAO,IAAP;AACH,CAvCD;;AA0CA,SACIjB,oBADJ;AAGA,eAAeC,YAAf","sourcesContent":["import { useEffect } from 'react';\nimport { AppState, NativeModules, Platform } from 'react-native';\n\nconst { ScreenRecorderDetect } = NativeModules;\n\n\nconst ScreenDetect = (props) => {\n    useEffect(() => {\n        if (Platform.OS == \"ios\") {\n            AppState.addEventListener(\"change\", _handleAppStateChange);\n            checkIfRecord();\n            return () => {\n                AppState.removeEventListener(\"change\", _handleAppStateChange);\n            };\n        }\n    }, [props]);\n\n    const checkIfRecord = () => {\n        try {\n            ScreenRecorderDetect.get().then(isRecord => {\n                console.log('isRecord', isRecord);\n                if (isRecord && isRecord == \"YES\") {\n                    if (props.Detect) {\n                        props.Detect(isRecord);\n                    }\n                } else {\n                    props.Detect(isRecord);\n                }\n            });\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    const _handleAppStateChange = async (nextAppState) => {\n        let interve = setInterval(() => {\n            checkIfRecord();\n        }, 1000);\n        setTimeout(() => {\n            if (interve != null) {\n                clearInterval(interve);\n            }\n        }, 5000);\n    };\n    return null;\n}\n\n\nexport {\n    ScreenRecorderDetect,\n}\nexport default ScreenDetect;\n"]}