{"version":3,"sources":["index.js"],"names":["ScreenRecorderDetect","NativeModules","ScreenDetect","props","Platform","OS","AppState","addEventListener","_handleAppStateChange","checkIfRecord","removeEventListener","get","then","isRecord","console","log","Detect","e","error","nextAppState","interve","setInterval","setTimeout","clearInterval"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAA2BC,0BAAjC;;;AAGA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC5B,wBAAU,MAAM;AACZ,QAAIC,sBAASC,EAAT,IAAe,KAAnB,EAA0B;AACtBC,4BAASC,gBAAT,CAA0B,QAA1B,EAAoCC,qBAApC;;AACAC,MAAAA,aAAa;AACb,aAAO,MAAM;AACTH,8BAASI,mBAAT,CAA6B,QAA7B,EAAuCF,qBAAvC;AACH,OAFD;AAGH;AACJ,GARD,EAQG,CAACL,KAAD,CARH;;AAUA,QAAMM,aAAa,GAAG,MAAM;AACxB,QAAI;AACAT,MAAAA,oBAAoB,CAACW,GAArB,GAA2BC,IAA3B,CAAgCC,QAAQ,IAAI;AACxCC,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,QAAxB;;AACA,YAAIA,QAAQ,IAAIA,QAAQ,IAAI,KAA5B,EAAmC;AAC/B,cAAIV,KAAK,CAACa,MAAV,EAAkB;AACdb,YAAAA,KAAK,CAACa,MAAN,CAAaH,QAAb;AACH;AACJ,SAJD,MAIO;AACHV,UAAAA,KAAK,CAACa,MAAN,CAAaH,QAAb;AACH;AACJ,OATD;AAUH,KAXD,CAWE,OAAOI,CAAP,EAAU;AACRH,MAAAA,OAAO,CAACI,KAAR,CAAcD,CAAd;AACH;AACJ,GAfD;;AAiBA,QAAMT,qBAAqB,GAAG,MAAOW,YAAP,IAAwB;AAClD,QAAIC,OAAO,GAAGC,WAAW,CAAC,MAAM;AAC5BZ,MAAAA,aAAa;AAChB,KAFwB,EAEtB,IAFsB,CAAzB;AAGAa,IAAAA,UAAU,CAAC,MAAM;AACb,UAAIF,OAAO,IAAI,IAAf,EAAqB;AACjBG,QAAAA,aAAa,CAACH,OAAD,CAAb;AACH;AACJ,KAJS,EAIP,IAJO,CAAV;AAKH,GATD;;AAUA,SAAO,IAAP;AACH,CAvCD;;eA6CelB,Y","sourcesContent":["import { useEffect } from 'react';\nimport { AppState, NativeModules, Platform } from 'react-native';\n\nconst { ScreenRecorderDetect } = NativeModules;\n\n\nconst ScreenDetect = (props) => {\n    useEffect(() => {\n        if (Platform.OS == \"ios\") {\n            AppState.addEventListener(\"change\", _handleAppStateChange);\n            checkIfRecord();\n            return () => {\n                AppState.removeEventListener(\"change\", _handleAppStateChange);\n            };\n        }\n    }, [props]);\n\n    const checkIfRecord = () => {\n        try {\n            ScreenRecorderDetect.get().then(isRecord => {\n                console.log('isRecord', isRecord);\n                if (isRecord && isRecord == \"YES\") {\n                    if (props.Detect) {\n                        props.Detect(isRecord);\n                    }\n                } else {\n                    props.Detect(isRecord);\n                }\n            });\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    const _handleAppStateChange = async (nextAppState) => {\n        let interve = setInterval(() => {\n            checkIfRecord();\n        }, 1000);\n        setTimeout(() => {\n            if (interve != null) {\n                clearInterval(interve);\n            }\n        }, 5000);\n    };\n    return null;\n}\n\n\nexport {\n    ScreenRecorderDetect,\n}\nexport default ScreenDetect;\n"]}